CREATE TABLE user
(
	id int NOT NULL PRIMARY KEY AUTO_INCREMENT,
	name varchar(100) NOT NULL,
	login varchar(40) NOT NULL,
	email varchar(60) NOT NULL UNIQUE,
	password varchar(40) NOT NULL
)

CREATE TABLE posts
(
	id int NOT NULL PRIMARY KEY AUTO_INCREMENT,
	content LONGTEXT,
	type int NOT NULL,
	author_id int NOT NULL
	FOREIGN KEY posts(author_id) REFERENCES user(id)
)

CREATE VIEW vwposts AS
select
 posts.id AS post_id,
 posts.content AS post_content,
 posts.type AS post_type,
 posts.date AS post_date,
 posts.classification AS post_classification,
 posts.privacity AS post_privacity,
 posts.picture AS post_picture,
 user.id AS user_id,
 user.name AS user_name,
 user.picture AS user_picture,
 post_types.name AS post_type_name,
 post_types.id AS post_type_id,
 COUNT(comment.id) as post_comments_count,
 COUNT(gostei.id) as post_gostei_count
from posts
inner join user
 on posts.author_id = user.id
inner join post_types
 on posts.type = post_types.id
left join comment
 on posts.id = comment.post_id
left join gostei
 on posts.id = gostei.post_id
GROUP By posts.id

CREATE VIEW vwcomment AS
select
	comment.id as comment_id,
	comment.content as comment_content,
	comment.date as comment_date,
	comment.post_id as comment_post_id,
	user.id as comment_author_id,
	user.name as comment_author_name,
	user.picture as comment_author_picture
from comment
inner join user
	on user.id = comment.action_author_id


CREATE VIEW Profile AS SELECT user.id as id, user.name as name, user.username as username, user.picture as picture, user.email as email FROM user

INSERT INTO user (name, login, email, password)
VALUES ('Diego Mi Campos', 'diegomi', 'diegomister@gmail.com', '1234');

CREATE VIEW vwfriend AS
select
	friend.user_id as user_id,
	user.id AS friend_id,
	user.name AS friend_name,
	user.username AS friend_username,
	user.picture AS friend_picture,
	user.email AS friend_email
from user
inner join friend
	on user.id = friend.friend_id

CREATE VIEW vwfriendflrs AS
select
    friend.friend_id AS user_id,
    friend.user_id as friend_id,
    user.name AS friend_name,
    user.username AS friend_username,
    user.picture AS friend_picture,
    user.email AS friend_email
from user
inner join friend
    on user.id = friend.user_id

--- SEGUINDO ---
# SQL #
CREATE VIEW following AS
select
	friend.user_id AS follower_id,
	user.id AS following_id,
    user.name AS following_name,
    user.username AS following_username,
    user.picture AS following_picture,
    user.email AS following_email
FROM user
Inner JOIN friend
	on user.id = friend.friend_id
# SQL #
--- END SEGUINDO ---

--- SEGUIDORES ---
# SQL #
CREATE VIEW followers AS
select
	friend.friend_id AS following_id,
	user.id AS follower_id,
    user.name AS follower_name,
    user.username AS follower_username,
    user.picture AS follower_picture,
    user.email AS follower_email
FROM user
Inner JOIN friend
	on user.id = friend.user_id
# SQL #
--- END SEGUIDORES ---

------------------------------------------------------
--------------------- TRIGERS ------------------------
------------------------------------------------------

--- NOTIFICATION ON GOSTEI
delimiter |

CREATE TRIGGER generate_notification_gostei AFTER INSERT ON gostei
  FOR EACH ROW
  BEGIN
    INSERT INTO notification SET post_id = NEW.post_id, action_author_id = NEW.user_id, action_type = 1;
  END;
|

delimiter ;

--- DELETE NOTIFICATION ON DELETE GOSTEI
CREATE TRIGGER `generate_notification_gostei_del` AFTER DELETE ON `gostei` FOR EACH ROW DELETE FROM notification WHERE (post_id = OLD.post_id AND action_author_id = OLD.action_author_id AND post_author_id=OLD.post_author.id AND action_type = 1);

--- NOTIFICATION ON COMMENT
delimiter |

CREATE TRIGGER generate_notification_comment AFTER INSERT ON comment
  FOR EACH ROW
BEGIN
INSERT INTO notification SET post_id = NEW.post_id, action_author_id = NEW.user_id, action_type = 2;
END;
|

delimiter ;

--- DELETE NOTIFICATION ON DELETE COMMENT
delimiter |

CREATE TRIGGER generate_notification_comment_del AFTER DELETE ON comment
  FOR EACH ROW
  BEGIN
    DELETE FROM comment WHERE (post_id = OLD.post_id AND action_user_id = OLD.user_id AND action_type = 2);
  END;
|

delimiter ;

------------------------------------------------------
--------------------- TRIGERS ------------------------
------------------------------------------------------